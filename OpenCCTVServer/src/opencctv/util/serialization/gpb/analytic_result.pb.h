// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytic_result.proto

#ifndef PROTOBUF_analytic_5fresult_2eproto__INCLUDED
#define PROTOBUF_analytic_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace opencctv {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_analytic_5fresult_2eproto();
void protobuf_AssignDesc_analytic_5fresult_2eproto();
void protobuf_ShutdownFile_analytic_5fresult_2eproto();

class analytic_result;

// ===================================================================

class analytic_result : public ::google::protobuf::Message {
 public:
  analytic_result();
  virtual ~analytic_result();

  analytic_result(const analytic_result& from);

  inline analytic_result& operator=(const analytic_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const analytic_result& default_instance();

  void Swap(analytic_result* other);

  // implements Message ----------------------------------------------

  analytic_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const analytic_result& from);
  void MergeFrom(const analytic_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint32 value);

  // required string input_name = 2;
  inline bool has_input_name() const;
  inline void clear_input_name();
  static const int kInputNameFieldNumber = 2;
  inline const ::std::string& input_name() const;
  inline void set_input_name(const ::std::string& value);
  inline void set_input_name(const char* value);
  inline void set_input_name(const char* value, size_t size);
  inline ::std::string* mutable_input_name();
  inline ::std::string* release_input_name();
  inline void set_allocated_input_name(::std::string* input_name);

  // required string timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // required string custom_text = 4;
  inline bool has_custom_text() const;
  inline void clear_custom_text();
  static const int kCustomTextFieldNumber = 4;
  inline const ::std::string& custom_text() const;
  inline void set_custom_text(const ::std::string& value);
  inline void set_custom_text(const char* value);
  inline void set_custom_text(const char* value, size_t size);
  inline ::std::string* mutable_custom_text();
  inline ::std::string* release_custom_text();
  inline void set_allocated_custom_text(::std::string* custom_text);

  // required bool write_to_db = 5;
  inline bool has_write_to_db() const;
  inline void clear_write_to_db();
  static const int kWriteToDbFieldNumber = 5;
  inline bool write_to_db() const;
  inline void set_write_to_db(bool value);

  // @@protoc_insertion_point(class_scope:opencctv.analytic_result)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_input_name();
  inline void clear_has_input_name();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_custom_text();
  inline void clear_has_custom_text();
  inline void set_has_write_to_db();
  inline void clear_has_write_to_db();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* input_name_;
  ::std::string* timestamp_;
  ::google::protobuf::uint32 stream_id_;
  bool write_to_db_;
  ::std::string* custom_text_;
  friend void  protobuf_AddDesc_analytic_5fresult_2eproto();
  friend void protobuf_AssignDesc_analytic_5fresult_2eproto();
  friend void protobuf_ShutdownFile_analytic_5fresult_2eproto();

  void InitAsDefaultInstance();
  static analytic_result* default_instance_;
};
// ===================================================================


// ===================================================================

// analytic_result

// required uint32 stream_id = 1;
inline bool analytic_result::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void analytic_result::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void analytic_result::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void analytic_result::clear_stream_id() {
  stream_id_ = 0u;
  clear_has_stream_id();
}
inline ::google::protobuf::uint32 analytic_result::stream_id() const {
  // @@protoc_insertion_point(field_get:opencctv.analytic_result.stream_id)
  return stream_id_;
}
inline void analytic_result::set_stream_id(::google::protobuf::uint32 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:opencctv.analytic_result.stream_id)
}

// required string input_name = 2;
inline bool analytic_result::has_input_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void analytic_result::set_has_input_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void analytic_result::clear_has_input_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void analytic_result::clear_input_name() {
  if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_name_->clear();
  }
  clear_has_input_name();
}
inline const ::std::string& analytic_result::input_name() const {
  // @@protoc_insertion_point(field_get:opencctv.analytic_result.input_name)
  return *input_name_;
}
inline void analytic_result::set_input_name(const ::std::string& value) {
  set_has_input_name();
  if (input_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_name_ = new ::std::string;
  }
  input_name_->assign(value);
  // @@protoc_insertion_point(field_set:opencctv.analytic_result.input_name)
}
inline void analytic_result::set_input_name(const char* value) {
  set_has_input_name();
  if (input_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_name_ = new ::std::string;
  }
  input_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:opencctv.analytic_result.input_name)
}
inline void analytic_result::set_input_name(const char* value, size_t size) {
  set_has_input_name();
  if (input_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_name_ = new ::std::string;
  }
  input_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencctv.analytic_result.input_name)
}
inline ::std::string* analytic_result::mutable_input_name() {
  set_has_input_name();
  if (input_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opencctv.analytic_result.input_name)
  return input_name_;
}
inline ::std::string* analytic_result::release_input_name() {
  clear_has_input_name();
  if (input_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = input_name_;
    input_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void analytic_result::set_allocated_input_name(::std::string* input_name) {
  if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_name_;
  }
  if (input_name) {
    set_has_input_name();
    input_name_ = input_name;
  } else {
    clear_has_input_name();
    input_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opencctv.analytic_result.input_name)
}

// required string timestamp = 3;
inline bool analytic_result::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void analytic_result::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void analytic_result::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void analytic_result::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& analytic_result::timestamp() const {
  // @@protoc_insertion_point(field_get:opencctv.analytic_result.timestamp)
  return *timestamp_;
}
inline void analytic_result::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:opencctv.analytic_result.timestamp)
}
inline void analytic_result::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:opencctv.analytic_result.timestamp)
}
inline void analytic_result::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencctv.analytic_result.timestamp)
}
inline ::std::string* analytic_result::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opencctv.analytic_result.timestamp)
  return timestamp_;
}
inline ::std::string* analytic_result::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void analytic_result::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opencctv.analytic_result.timestamp)
}

// required string custom_text = 4;
inline bool analytic_result::has_custom_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void analytic_result::set_has_custom_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void analytic_result::clear_has_custom_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void analytic_result::clear_custom_text() {
  if (custom_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_text_->clear();
  }
  clear_has_custom_text();
}
inline const ::std::string& analytic_result::custom_text() const {
  // @@protoc_insertion_point(field_get:opencctv.analytic_result.custom_text)
  return *custom_text_;
}
inline void analytic_result::set_custom_text(const ::std::string& value) {
  set_has_custom_text();
  if (custom_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_text_ = new ::std::string;
  }
  custom_text_->assign(value);
  // @@protoc_insertion_point(field_set:opencctv.analytic_result.custom_text)
}
inline void analytic_result::set_custom_text(const char* value) {
  set_has_custom_text();
  if (custom_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_text_ = new ::std::string;
  }
  custom_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:opencctv.analytic_result.custom_text)
}
inline void analytic_result::set_custom_text(const char* value, size_t size) {
  set_has_custom_text();
  if (custom_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_text_ = new ::std::string;
  }
  custom_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencctv.analytic_result.custom_text)
}
inline ::std::string* analytic_result::mutable_custom_text() {
  set_has_custom_text();
  if (custom_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opencctv.analytic_result.custom_text)
  return custom_text_;
}
inline ::std::string* analytic_result::release_custom_text() {
  clear_has_custom_text();
  if (custom_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_text_;
    custom_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void analytic_result::set_allocated_custom_text(::std::string* custom_text) {
  if (custom_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_text_;
  }
  if (custom_text) {
    set_has_custom_text();
    custom_text_ = custom_text;
  } else {
    clear_has_custom_text();
    custom_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opencctv.analytic_result.custom_text)
}

// required bool write_to_db = 5;
inline bool analytic_result::has_write_to_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void analytic_result::set_has_write_to_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void analytic_result::clear_has_write_to_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void analytic_result::clear_write_to_db() {
  write_to_db_ = false;
  clear_has_write_to_db();
}
inline bool analytic_result::write_to_db() const {
  // @@protoc_insertion_point(field_get:opencctv.analytic_result.write_to_db)
  return write_to_db_;
}
inline void analytic_result::set_write_to_db(bool value) {
  set_has_write_to_db();
  write_to_db_ = value;
  // @@protoc_insertion_point(field_set:opencctv.analytic_result.write_to_db)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace opencctv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_analytic_5fresult_2eproto__INCLUDED

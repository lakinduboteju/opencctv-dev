// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opencctv {

namespace {

const ::google::protobuf::Descriptor* image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  image_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_image_2eproto() {
  protobuf_AddDesc_image_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "image.proto");
  GOOGLE_CHECK(file != NULL);
  image_descriptor_ = file->message_type(0);
  static const int image_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, image_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, input_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, timestamp_),
  };
  image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      image_descriptor_,
      image::default_instance_,
      image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(image));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_image_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    image_descriptor_, &image::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_image_2eproto() {
  delete image::default_instance_;
  delete image_reflection_;
}

void protobuf_AddDesc_image_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013image.proto\022\010opencctv\"t\n\005image\022\022\n\nimag"
    "e_data\030\001 \003(\r\022\r\n\005width\030\002 \002(\r\022\016\n\006height\030\003 "
    "\002(\r\022\021\n\tstream_id\030\004 \001(\r\022\022\n\ninput_name\030\005 \001"
    "(\t\022\021\n\ttimestamp\030\006 \002(\t", 141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image.proto", &protobuf_RegisterTypes);
  image::default_instance_ = new image();
  image::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_image_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_image_2eproto {
  StaticDescriptorInitializer_image_2eproto() {
    protobuf_AddDesc_image_2eproto();
  }
} static_descriptor_initializer_image_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int image::kImageDataFieldNumber;
const int image::kWidthFieldNumber;
const int image::kHeightFieldNumber;
const int image::kStreamIdFieldNumber;
const int image::kInputNameFieldNumber;
const int image::kTimestampFieldNumber;
#endif  // !_MSC_VER

image::image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencctv.image)
}

void image::InitAsDefaultInstance() {
}

image::image(const image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opencctv.image)
}

void image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  stream_id_ = 0u;
  input_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

image::~image() {
  // @@protoc_insertion_point(destructor:opencctv.image)
  SharedDtor();
}

void image::SharedDtor() {
  if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_name_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return image_descriptor_;
}

const image& image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2eproto();
  return *default_instance_;
}

image* image::default_instance_ = NULL;

image* image::New() const {
  return new image;
}

void image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 62) {
    ZR_(width_, height_);
    stream_id_ = 0u;
    if (has_input_name()) {
      if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_name_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  image_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencctv.image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 image_data = 1;
      case 1: {
        if (tag == 8) {
         parse_image_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_image_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_image_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_image_data;
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // required uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stream_id;
        break;
      }

      // optional uint32 stream_id = 4;
      case 4: {
        if (tag == 32) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_input_name;
        break;
      }

      // optional string input_name = 5;
      case 5: {
        if (tag == 42) {
         parse_input_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_name().data(), this->input_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencctv.image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencctv.image)
  return false;
#undef DO_
}

void image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencctv.image)
  // repeated uint32 image_data = 1;
  for (int i = 0; i < this->image_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->image_data(i), output);
  }

  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 stream_id = 4;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stream_id(), output);
  }

  // optional string input_name = 5;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->input_name(), output);
  }

  // required string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencctv.image)
}

::google::protobuf::uint8* image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencctv.image)
  // repeated uint32 image_data = 1;
  for (int i = 0; i < this->image_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->image_data(i), target);
  }

  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 stream_id = 4;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stream_id(), target);
  }

  // optional string input_name = 5;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->input_name(), target);
  }

  // required string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencctv.image)
  return target;
}

int image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 stream_id = 4;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }

    // optional string input_name = 5;
    if (has_input_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_name());
    }

    // required string timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated uint32 image_data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->image_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->image_data(i));
    }
    total_size += 1 * this->image_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void image::MergeFrom(const image& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_data_.MergeFrom(from.image_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_input_name()) {
      set_input_name(from.input_name());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image::CopyFrom(const image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000026) != 0x00000026) return false;

  return true;
}

void image::Swap(image* other) {
  if (other != this) {
    image_data_.Swap(&other->image_data_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(input_name_, other->input_name_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = image_descriptor_;
  metadata.reflection = image_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace opencctv

// @@protoc_insertion_point(global_scope)

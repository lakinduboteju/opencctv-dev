// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytic_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "analytic_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opencctv {

namespace {

const ::google::protobuf::Descriptor* analytic_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  analytic_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_analytic_5fresult_2eproto() {
  protobuf_AddDesc_analytic_5fresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "analytic_result.proto");
  GOOGLE_CHECK(file != NULL);
  analytic_result_descriptor_ = file->message_type(0);
  static const int analytic_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, input_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, custom_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, write_to_db_),
  };
  analytic_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      analytic_result_descriptor_,
      analytic_result::default_instance_,
      analytic_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analytic_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(analytic_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_analytic_5fresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    analytic_result_descriptor_, &analytic_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_analytic_5fresult_2eproto() {
  delete analytic_result::default_instance_;
  delete analytic_result_reflection_;
}

void protobuf_AddDesc_analytic_5fresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025analytic_result.proto\022\010opencctv\"u\n\017ana"
    "lytic_result\022\021\n\tstream_id\030\001 \002(\r\022\022\n\ninput"
    "_name\030\002 \002(\t\022\021\n\ttimestamp\030\003 \002(\t\022\023\n\013custom"
    "_text\030\004 \002(\t\022\023\n\013write_to_db\030\005 \002(\010", 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "analytic_result.proto", &protobuf_RegisterTypes);
  analytic_result::default_instance_ = new analytic_result();
  analytic_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_analytic_5fresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_analytic_5fresult_2eproto {
  StaticDescriptorInitializer_analytic_5fresult_2eproto() {
    protobuf_AddDesc_analytic_5fresult_2eproto();
  }
} static_descriptor_initializer_analytic_5fresult_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int analytic_result::kStreamIdFieldNumber;
const int analytic_result::kInputNameFieldNumber;
const int analytic_result::kTimestampFieldNumber;
const int analytic_result::kCustomTextFieldNumber;
const int analytic_result::kWriteToDbFieldNumber;
#endif  // !_MSC_VER

analytic_result::analytic_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opencctv.analytic_result)
}

void analytic_result::InitAsDefaultInstance() {
}

analytic_result::analytic_result(const analytic_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opencctv.analytic_result)
}

void analytic_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_id_ = 0u;
  input_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_to_db_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

analytic_result::~analytic_result() {
  // @@protoc_insertion_point(destructor:opencctv.analytic_result)
  SharedDtor();
}

void analytic_result::SharedDtor() {
  if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_name_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (custom_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_text_;
  }
  if (this != default_instance_) {
  }
}

void analytic_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* analytic_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return analytic_result_descriptor_;
}

const analytic_result& analytic_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytic_5fresult_2eproto();
  return *default_instance_;
}

analytic_result* analytic_result::default_instance_ = NULL;

analytic_result* analytic_result::New() const {
  return new analytic_result;
}

void analytic_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<analytic_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(stream_id_, write_to_db_);
    if (has_input_name()) {
      if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_name_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
    if (has_custom_text()) {
      if (custom_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool analytic_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opencctv.analytic_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_name;
        break;
      }

      // required string input_name = 2;
      case 2: {
        if (tag == 18) {
         parse_input_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_name().data(), this->input_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_custom_text;
        break;
      }

      // required string custom_text = 4;
      case 4: {
        if (tag == 34) {
         parse_custom_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_text().data(), this->custom_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "custom_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_write_to_db;
        break;
      }

      // required bool write_to_db = 5;
      case 5: {
        if (tag == 40) {
         parse_write_to_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_to_db_)));
          set_has_write_to_db();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opencctv.analytic_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opencctv.analytic_result)
  return false;
#undef DO_
}

void analytic_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opencctv.analytic_result)
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stream_id(), output);
  }

  // required string input_name = 2;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_name(), output);
  }

  // required string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  // required string custom_text = 4;
  if (has_custom_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_text().data(), this->custom_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->custom_text(), output);
  }

  // required bool write_to_db = 5;
  if (has_write_to_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->write_to_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opencctv.analytic_result)
}

::google::protobuf::uint8* analytic_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencctv.analytic_result)
  // required uint32 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stream_id(), target);
  }

  // required string input_name = 2;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_name(), target);
  }

  // required string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  // required string custom_text = 4;
  if (has_custom_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_text().data(), this->custom_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "custom_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->custom_text(), target);
  }

  // required bool write_to_db = 5;
  if (has_write_to_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->write_to_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencctv.analytic_result)
  return target;
}

int analytic_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }

    // required string input_name = 2;
    if (has_input_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_name());
    }

    // required string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // required string custom_text = 4;
    if (has_custom_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_text());
    }

    // required bool write_to_db = 5;
    if (has_write_to_db()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void analytic_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const analytic_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const analytic_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void analytic_result::MergeFrom(const analytic_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_input_name()) {
      set_input_name(from.input_name());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_custom_text()) {
      set_custom_text(from.custom_text());
    }
    if (from.has_write_to_db()) {
      set_write_to_db(from.write_to_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void analytic_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void analytic_result::CopyFrom(const analytic_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool analytic_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void analytic_result::Swap(analytic_result* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(input_name_, other->input_name_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(custom_text_, other->custom_text_);
    std::swap(write_to_db_, other->write_to_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata analytic_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = analytic_result_descriptor_;
  metadata.reflection = analytic_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace opencctv

// @@protoc_insertion_point(global_scope)
